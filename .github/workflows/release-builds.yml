# builds on vX.X.X PUSH to main only. Generates versioned binaries, vX.X.X tags, and GitHub releases
name: release-builds
on:
  push:
    tags:
      - 'v*'
jobs:
  mac-os-build:
    name: Build Mac OS binaries
    runs-on: macos-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Save Latest Git Version As Env
        run: |
          GIT_LAST_VERSION=$(git describe --tags --abbrev=0)
          echo "Last git tag: $GIT_LAST_VERSION"

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '~1.17.1'

      - name: Build
        run: |
          BUILD_DATE=$(date -u "+%F %T+00:00")
          GIT_COMMIT=$(git rev-parse --short HEAD)
          GIT_BRANCH=$(git branch --show-current)
          REPO_PREFIX="github.com/andrewpmartinez/grid"
          go build -ldflags "-s -w -X '$REPO_PREFIX/dump.Commit=$GIT_COMMIT' -X '$REPO_PREFIX/dump.Branch=$GIT_BRANCH' -X '$REPO_PREFIX/dump.Version=$GIT_LAST_VERSION-$GIT-COMMIT' -X '$REPO_PREFIX/dump.BuildDate=$BUILD_DATE'" -o "./" ./...
          tar -cvf grid.tar ./grid

      - name: List
        run: |
          pwd
          ls -la

      - name: Test
        run: |
          go test ./...

      - name: Save Artifact
        uses: actions/upload-artifact@v2
        with:
          name: grid.mac.x64
          path: ./grid.tar



  windows-build:
    name: Build Windows binaries
    runs-on: windows-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Save Latest Git Version As Env
        run: |
          $GIT_LAST_VERSION=git describe --tags --abbrev=0
          echo "Last git tag: $GIT_LAST_VERSION"

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '~1.17.1'

      - name: Build
        run: |
          $BUILD_DATE=get-date -AsUTC -Format "yyyy-MM-dd HH:mm:ss+00:00"
          $GIT_COMMIT=git rev-parse --short HEAD
          $GIT_BRANCH=git branch --show-current
          $REPO_PREFIX="github.com/andrewpmartinez/grid"
          go build -ldflags "-s -w -H=windowsgui -extldflags=-static -X '$REPO_PREFIX/dump.Commit=$GIT_COMMIT' -X '$REPO_PREFIX/dump.Branch=$GIT_BRANCH' -X '$REPO_PREFIX/dump.Version=$GIT_LAST_VERSION-$GIT-COMMIT' -X '$REPO_PREFIX/dump.BuildDate=$BUILD_DATE'" -o "./" ./...
      - name: List
        run: |
          ls

      - name: Test
        run: |
          go test ./...

      - name: Save Artifact
        uses: actions/upload-artifact@v2
        with:
          name: grid.windows.x64
          path: ./grid.exe

  linux-build:
    name: Build Linux Binaries
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Save Latest Git Version As Env
        run: |
          GIT_LAST_VERSION=$(git describe --tags --abbrev=0)
          echo "Last git tag: $GIT_LAST_VERSION"

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '~1.17.1'

      - name: Install apt deps
        run: |
          sudo apt-get update
          sudo apt install libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libgl1-mesa-dev libxxf86vm-dev

      - name: Build
        run: |
          BUILD_DATE=$(date -u "+%F %T+00:00")
          GIT_COMMIT=$(git rev-parse --short HEAD)
          GIT_BRANCH=$(git branch --show-current)
          REPO_PREFIX="github.com/andrewpmartinez/grid"
          go build -ldflags "-X '$REPO_PREFIX/dump.Commit=$GIT_COMMIT' -X '$REPO_PREFIX/dump.Branch=$GIT_BRANCH' -X '$REPO_PREFIX/dump.Version=$GIT_LAST_VERSION-$GIT-COMMIT' -X '$REPO_PREFIX/dump.BuildDate=$BUILD_DATE'" -o "./" ./...
          tar -cvf grid.tar ./grid
      - name: List
        run: |
          pwd
          ls -la

      - name: Test
        run: |
          go test ./...

      - name: Save Artifact
        uses: actions/upload-artifact@v2
        with:
          name: grid.linux.x64
          path: ./grid.tar
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [mac-os-build, windows-build, linux-build]
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v2
      - name: List Files
        run: |
          pwd
          ls -la
          ls -la grid.linux.x64
          ls -la grid.windows.x64
          ls -la grid.mac.x64
      - name: Compress Artifacts
        run: |
          zip ./grid.windows.x64.zip ./grid.windows.x64/grid.exe
          
          gzip ./grid.linux.x64/grid.tar
          mv ./grid.linux.x64/grid.tar.gz ./grid.linux.x64.tar.gz
          
          gzip ./grid.mac.x64/grid.tar
          mv ./grid.mac.x64/grid.tar.gz ./grid.mac.x64.tar.gz
          
          ls -la

      - name: Create Release w/ Notes & Artifacts
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Linux Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} #ref's the URL for the release created above
          asset_path: ./grid.linux.x64.tar.gz
          asset_name: grid.linux.x64.tar.gz
          asset_content_type: application/gzip

      - name: Upload MacOs Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} #ref's the URL for the release created above
          asset_path: ./grid.mac.x64.tar.gz
          asset_name: grid.mac.x64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} #ref's the URL for the release created above
          asset_path: ./grid.windows.x64.zip
          asset_name: grid.windows.x64.zip
          asset_content_type: application/zip